# .github/workflows/deploy-backend.yml
name: Deploy Ecko Backend (Genesis 2.0)

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch: # Allow manual trigger

# Permissions ορίζονται πλέον μόνο σε επίπεδο job παρακάτω


jobs:
  deploy:
    runs-on: ubuntu-latest
    # Permissions ορισμένα εδώ για το deploy job
    permissions:
      contents: 'read'
      id-token: 'write' # Required for Workload Identity Federation
      variables: 'write' # Required to set the ECKO_BACKEND_URL variable
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - id: 'auth'
      name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WIF_POOL_ID }}/providers/${{ secrets.GCP_WIF_PROVIDER_ID }}'
        service_account: '${{ secrets.GCP_SA_EMAIL }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy Ecko HTTP Function
      id: deploy
      run: |
        echo "Deploying ecko-http-function..."
        gcloud functions deploy ecko-http-function \
          --gen2 \
          --region=${{ vars.GCP_REGION || 'us-central1' }} \
          --runtime=python311 \
          --source=./backend \
          --entry-point=ecko_main \
          --trigger-http \
          --allow-unauthenticated \
          --memory=${{ vars.GCF_MEMORY || '1GiB' }} \
          --timeout=${{ vars.GCF_TIMEOUT || '540s' }} \
          --max-instances=${{ vars.GCF_MAX_INSTANCES || '2' }} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --service-account=${{ secrets.GCP_SA_EMAIL }} \
          --set-env-vars=^##^GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}##GCP_GITHUB_PAT_SECRET_NAME=${{ secrets.GCP_GITHUB_PAT_SECRET_NAME }}##GITHUB_REPO_OWNER=${{ github.repository_owner }}##GITHUB_REPO_NAME=${{ github.event.repository.name }}##ECKO_SHARED_SECRET=${{ secrets.ECKO_SHARED_SECRET }}##LOG_LEVEL=INFO##PYTHONUNBUFFERED=1##ALLOWED_ORIGIN=https://${{ github.repository_owner }}.github.io##COMMIT_AUTHOR_EMAIL=${{ secrets.COMMIT_AUTHOR_EMAIL }}

    - name: Get Function URL
      id: get_url
      run: |
        echo "Retrieving function URL..."
        for i in {1..5}; do
          URL=$(gcloud functions describe ecko-http-function --gen2 --project=${{ secrets.GCP_PROJECT_ID }} --region=${{ vars.GCP_REGION || 'us-central1' }} --format='value(serviceConfig.uri)' 2>/dev/null)
          if [ -n "$URL" ]; then
            echo "Function URL retrieved: $URL"
            echo "url=$URL" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Attempt $i: Function URL not available yet, waiting 10 seconds..."
          sleep 10
        done
        echo "Error: Failed to retrieve function URL after multiple attempts." >&2
        exit 1

    - name: Set ECKO_BACKEND_URL Repository Variable
      env:
        GH_TOKEN: ${{ github.token }}
        FUNCTION_URL: ${{ steps.get_url.outputs.url }}
      run: |
        if [ -z "$FUNCTION_URL" ]; then
          echo "Error: Function URL is empty, cannot set repository variable." >&2
          exit 1
        fi
        echo "Setting ECKO_BACKEND_URL repository variable..."
        gh variable set ECKO_BACKEND_URL --body "$FUNCTION_URL" --repo "$GITHUB_REPOSITORY"
        echo "Repository variable ECKO_BACKEND_URL set."

    - name: Display Information
      run: |
        echo "======================================================================="
        echo "Backend deployment finished."
        echo "Function URL: ${{ steps.get_url.outputs.url }}"
        echo "Repository variable 'ECKO_BACKEND_URL' has been automatically updated."
        echo "The frontend deployment workflow will use this variable."
        echo "======================================================================="